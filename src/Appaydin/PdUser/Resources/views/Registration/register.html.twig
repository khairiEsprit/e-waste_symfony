{% extends "@PdUser/base.html.twig" %}

{% block body %}

    {% form_theme form 'bootstrap_4_layout.html.twig' %}
    <div class="login">
        <img src="{{ asset('assets/front/auth/bg-image.png') }}" alt="register image" class="login__img">

        {{ form_start(form, {'attr': {'class': 'login__form', 'novalidate': 'novalidate'}}) }}
            <h1 class="login__title">{{ 'security.register_title'|trans }}</h1>
            
            {% if form_errors(form) %}
            <div class="login__alert">
                <i class="ri-error-warning-line login__alert-icon"></i>
                <div class="login__alert-text">{{ form_errors(form) }}</div>
            </div>
            {% endif %}
            
            {% if app.session.flashBag.has('error') %}
            <div class="login__alert">
                <i class="ri-error-warning-line login__alert-icon"></i>
                <div class="login__alert-text">{{ app.session.flashBag.get('error')[0] }}</div>
            </div>
            {% endif %}
            
            {% if app.session.flashBag.has('modal_error') %}
            <div class="login__alert">
                <i class="ri-error-warning-line login__alert-icon"></i>
                <div class="login__alert-text">{{ app.session.flashBag.get('modal_error')[0] }}</div>
            </div>
            {% endif %}

            <div class="login__content">
                <div class="login__column">
                    <div class="login__box">
                        <i class="ri-user-line login__icon"></i>
                        <div class="login__box-input">
                            {{ form_widget(form.firstName, {'attr': {'class': 'login__input', 'id': 'register-firstname'}}) }}
                            <label for="register-firstname" class="login__label">First Name</label>
                            <span class="error-text">{{ form_errors(form.firstName) }}</span>
                        </div>
                    </div>
                    <div class="login__box">
                        <i class="ri-calendar-line login__icon"></i>
                        <div class="login__box-input birthdate-container">
                            {{ form_widget(form.birthdate, {'attr': {
                                'class': 'login__input js-datepicker',
                                'id': 'register-birthdate',
                                'placeholder': ' ',
                                'oninvalid': 'this.setCustomValidity(\'\')',
                                'oninput': 'validateBirthdate(this)',
                                'autocomplete': 'off'
                            }}) }}
                            <label for="register-birthdate" class="login__label">Birthdate</label>
                            <div class="login__error" id="birthdate-error"></div>
                            {% if form.birthdate.vars.errors|length > 0 %}
                                <div class="error-text" style="color: #ff4444 !important; display: block !important;">
                                    {% for error in form.birthdate.vars.errors %}
                                        {{ error.message }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                    </div>
                    <div class="login__box">
                        <i class="ri-image-line login__icon"></i>
                        <div class="login__box-input">
                            {{ form_widget(form.profileImageFile, {
                                'attr': {
                                    'class': 'login__input file-input',
                                    'id': 'register-image',
                                    'type': 'file',
                                    'accept': 'image/jpeg, image/png, image/gif',
                                    'onchange': 'handleFileSelect(this)'
                                }
                            }) }}
                            <label for="register-image" class="file-label" id="file-label">
                                <i class="ri-upload-cloud-line"></i> Choose File
                                <span class="file-name" id="file-name">No file chosen</span>
                            </label>
                            <div class="progress-container" id="progress-container" style="display: none;">
                                <div class="progress-bar" id="progress-bar"></div>
                                <span class="progress-text" id="progress-text">0%</span>
                            </div>
                            <div class="login__error" id="image-error"></div>
                            {% if form.profileImageFile.vars.errors|length > 0 %}
                                <div class="error-text" style="color: #ff4444 !important; display: block !important;">
                                    {% for error in form.profileImageFile.vars.errors %}
                                        {{ error.message }}
                                    {% endfor %}
                                </div>
                            {% endif %}
                        </div>
                    </div>
                </div>
                <div class="login__column">
                    <div class="login__box">
                        <i class="ri-user-3-line login__icon"></i>
                        <div class="login__box-input">
                            {{ form_widget(form.email, {'attr': {'class': 'login__input', 'id': 'register-email'}}) }}
                            <label for="register-email" class="login__label">{{ 'security.login_username'|trans }}</label>
                            <span class="error-text">{{ form_errors(form.email) }}</span>
                        </div>
                    </div>
                    <div class="login__box">
                        <i class="ri-lock-2-line login__icon"></i>
                        <div class="login__box-input">
                            {{ form_widget(form.plainPassword.first, {'attr': {'class': 'login__input', 'id': 'register-pass'}}) }}
                            <label for="register-pass" class="login__label">{{ 'security.login_password'|trans }}</label>
                            <i class="ri-eye-off-line login__eye" id="register-eye"></i>
                            <span class="error-text">{{ form_errors(form.plainPassword.first) }}</span>
                        </div>
                    </div>
                    <div class="login__box">
                        <i class="ri-lock-2-line login__icon"></i>
                        <div class="login__box-input">
                            {{ form_widget(form.plainPassword.second, {'attr': {'class': 'login__input', 'id': 'register-pass-confirm'}}) }}
                            <label for="register-pass-confirm" class="login__label">Confirm Password</label>
                            <span class="error-text">{{ form_errors(form.plainPassword.second) }}</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="login__box login__box-select">
                <i class="ri-user-star-line login__icon"></i>
                <div class="login__box-input">
                    {{ form_widget(form.selectedRole, {'attr': {'class': 'login__input login__select', 'id': 'register-role'}}) }}
                    <label for="register-role" class="login__label">{{ 'security.role'|trans }}</label>
                    <span class="error-text">{{ form_errors(form.selectedRole) }}</span>
                </div>
            </div>

            <button type="submit" class="login__button">{{ 'security.register_btn'|trans }}</button>

            <p class="login__register">
                Already have an account?
                <a href="{{ path('security_login') }}">{{ 'security.login_title'|trans }}</a>
            </p>
        {{ form_end(form) }}
    </div>
    
    {# Modal for user already exists #}
    {% if app.session.flashBag.has('modal_error') %}
        <div class="modal-overlay" id="errorModal">
            <div class="modal-content">
                <h2>Error</h2>
                <p>{{ app.session.flashBag.get('modal_error')[0] }}</p>
                <button onclick="closeModal()">OK</button>
            </div>
        </div>
    {% endif %}

    <style>
    /* Ensure the container is a flexbox to align items properly */


/* Style the input container */
.login__box-datepicker .login__box-input {
    position: relative;
    width: 100%;
    display: flex;
    align-items: center;
}

/* Align the icon and input */


/* Style the input field */
.login__box-datepicker .login__input {
    padding-left: 40px; /* Space for the icon on the left */
    padding-right: 40px; /* Space for the datepicker trigger on the right */
    width: 100%;
    background: transparent;
    color: var(--white-color);
    border-radius: 8px;
    height: 80px;
}

/* Style the label */




/* Style the datepicker trigger button */
.ui-datepicker-trigger {
    background: none;
    border: none;
    color: white;
    position: absolute;
    right: 0;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    z-index: 2;
}

.birthdate-container {
    position: relative;
}

/* Ensure the datepicker calendar appears below the input */

        /* Your original styles remain unchanged */
        .login__input:not(:placeholder-shown).login__input:not(:focus) + .login__label,
        .active-label {
            top: -12px !important;
            font-size: var(--small-font-size) !important;
        }
        .login__input:focus + .login__label {
            top: -12px;
            font-size: var(--small-font-size);
        }

        .login__register {
            text-align: center;
            font-size: var(--small-font-size);
        }
        .login__register a {
            color: var(--white-color);
            font-weight: var(--font-medium);
        }
        .login__register a:hover {
            text-decoration: underline;
        }

        input,
        button,
        select {
            border: none;
            outline: none;
        }

        .login__form {
            position: relative;
            background-color: hsla(0, 0%, 10%, 0.1);
            border: 2px solid var(--white-color);
            margin-inline: 1.5rem;
            padding: 1.5rem 3rem 1rem;
            border-radius: 1rem;
            width: 800px;
            backdrop-filter: blur(8px);
        }
        .login__box-select .login__select option {
            color: var(--black-color);
            background: var(--white-color);
        }
        .login__button {
            width: 100%;
            padding: 0.5rem;
            border-radius: 0.5rem;
            background-color: var(--white-color);
            font-weight: var(--font-medium);
            cursor: pointer;
            margin-bottom: 2rem;
            text-align: center;
        }
        .login__content {
            display: flex;
            justify-content: space-between;
            gap: 1.5rem;
        }
        .login__column {
            width: 48%;
        }
        .login__box {
            margin-bottom: 1rem;
        }
        
        .file-input {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .file-label {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            padding: 10px 15px;
            background-color: rgba(255, 255, 255, 0.2);
            border: 2px solid white;
            border-radius: 8px;
            color: white;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            position: relative;
        }

        .file-label i {
            font-size: 1.5rem;
        }

        .file-label:hover {
            background-color: rgba(255, 255, 255, 0.3);
        }
        
        .file-selected {
            background-color: rgba(76, 175, 80, 0.3);
            border-color: #4CAF50;
        }

        .file-name {
            font-size: 0.9rem;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 150px;
        }
        
        .progress-container {
            width: 100%;
            margin-top: 10px;
            background-color: rgba(255, 255, 255, 0.2);
            border-radius: 5px;
            position: relative;
            height: 20px;
        }
        
        .progress-bar {
            height: 100%;
            border-radius: 5px;
            background-color: #4CAF50;
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .progress-text {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
            font-weight: bold;
        }
        
        .login__error {
            position: absolute;
            bottom: -1.25rem;
            left: 0;
            font-size: 0.7rem;
            color: #ff4444;
            margin-top: 0.2rem;
        }
        
        .login__input.has-error {
            border-bottom-color: #ff4444;
        }
        
        .error-text {
            color: #ff4444;
            font-size: 0.7rem;
            display: block;
            margin-top: 0.2rem;
        }
    </style>

    {% block javascripts %}
        {{ parent() }}
        <!-- jQuery and jQuery UI dependencies -->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>
        <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

        <script>
        $(document).ready(function() {
            // Initialize datepicker
            $('.js-datepicker').datepicker({
                changeMonth: true,
                changeYear: true,
                yearRange: "-100:+0",
                maxDate: "-18y",
                dateFormat: 'mm/dd/yy',
                showOn: 'both', // Show datepicker on input focus and button click
                buttonText: '<i class="ri-calendar-line"></i>',
                beforeShow: function(input, inst) {
                    // Position the datepicker below the input
                    setTimeout(function() {
                        inst.dpDiv.css({
                            top: $(input).offset().top + $(input).outerHeight() + 10,
                            left: $(input).offset().left
                        });
                    }, 0);
                },
                onSelect: function(dateText) {
                    $(this).trigger('change');
                    $(this).addClass('has-value');
                    
                    // Ensure the date is in the correct format for Symfony (MM/DD/YYYY)
                    var date = $(this).datepicker('getDate');
                    if (date) {
                        var month = ('0' + (date.getMonth() + 1)).slice(-2);
                        var day = ('0' + date.getDate()).slice(-2);
                        var year = date.getFullYear();
                        var formattedDate = month + '/' + day + '/' + year;
                        $(this).val(formattedDate);
                    }
                    
                    // Force the label to stay in the "active" position
                    $(this).parent().find('.login__label').addClass('active-label');
                    
                    // Clear any previous error
                    document.getElementById('birthdate-error').textContent = '';
                    $(this).removeClass('has-error');
                    
                    validateBirthdate(this);
                }
            });
            
            // Check if the birthdate field already has a value on page load
            if ($('#register-birthdate').val()) {
                $('#register-birthdate').parent().find('.login__label').addClass('active-label');
            }

            // Form validation on submit
            $('.login__form').on('submit', function(e) {
                const birthdateInput = document.getElementById('register-birthdate');
                const fileInput = document.getElementById('register-image');
                
                const isBirthdateValid = validateBirthdate(birthdateInput);
                const isFileValid = validateFile(fileInput);
                
                if (!isBirthdateValid || !isFileValid) {
                    e.preventDefault();
                }
            });

            // Password eye toggle
            $('#register-eye').on('click', function() {
                const passwordInput = document.getElementById('register-password');
                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    $(this).removeClass('ri-eye-off-line').addClass('ri-eye-line');
                } else {
                    passwordInput.type = 'password';
                    $(this).removeClass('ri-eye-line').addClass('ri-eye-off-line');
                }
            });
        });

        // Validate birthdate
        function validateBirthdate(input) {
            const errorDiv = document.getElementById('birthdate-error');
            
            if (!input.value) {
                errorDiv.textContent = 'Birthdate is required';
                input.classList.add('has-error');
                $(input).parent().find('.login__label').removeClass('active-label');
                return false;
            } else {
                // Check if the user is at least 18 years old
                // Parse date in MM/dd/yyyy format
                const parts = input.value.split('/');
                if (parts.length !== 3) {
                    errorDiv.textContent = 'Please enter a valid date (MM/DD/YYYY)';
                    input.classList.add('has-error');
                    return false;
                }
                
                const month = parseInt(parts[0], 10) - 1; // Months are 0-indexed in JS
                const day = parseInt(parts[1], 10);
                const year = parseInt(parts[2], 10);
                
                if (isNaN(month) || isNaN(day) || isNaN(year) || 
                    month < 0 || month > 11 || day < 1 || day > 31 || year < 1900) {
                    errorDiv.textContent = 'Please enter a valid date (MM/DD/YYYY)';
                    input.classList.add('has-error');
                    return false;
                }
                
                const birthDate = new Date(year, month, day);
                const today = new Date();
                const age = today.getFullYear() - birthDate.getFullYear();
                const monthDiff = today.getMonth() - birthDate.getMonth();
                
                // Keep the label in the active position
                $(input).parent().find('.login__label').addClass('active-label');
                
                if (age < 18 || (age === 18 && monthDiff < 0) || (age === 18 && monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                    errorDiv.textContent = 'You must be at least 18 years old';
                    input.classList.add('has-error');
                    return false;
                } else {
                    errorDiv.textContent = '';
                    input.classList.remove('has-error');
                    return true;
                }
            }
        }

        // Handle file selection
        function handleFileSelect(input) {
            const fileName = input.files.length > 0 ? input.files[0].name : 'No file chosen';
            const fileNameElement = document.getElementById('file-name');
            const fileLabel = document.getElementById('file-label');
            const errorDiv = document.getElementById('image-error');
            
            if (input.files.length > 0) {
                // Update file name display
                fileNameElement.textContent = fileName;
                fileLabel.classList.add('file-selected');
                
                // Validate file type and size
                const file = input.files[0];
                const fileType = file.type;
                const validTypes = ['image/jpeg', 'image/png', 'image/gif'];
                const maxSize = 5 * 1024 * 1024; // 5MB
                
                if (!validTypes.includes(fileType)) {
                    errorDiv.textContent = 'Please select a valid image file (JPEG, PNG, GIF)';
                    input.classList.add('has-error');
                    return false;
                } else if (file.size > maxSize) {
                    errorDiv.textContent = 'File size must be less than 5MB';
                    input.classList.add('has-error');
                    return false;
                } else {
                    errorDiv.textContent = '';
                    input.classList.remove('has-error');
                    
                    // Show upload progress simulation
                    simulateUploadProgress();
                    return true;
                }
            } else {
                fileNameElement.textContent = 'No file chosen';
                fileLabel.classList.remove('file-selected');
                return true;
            }
        }

        // Validate file on form submission
        function validateFile(input) {
            if (input.files.length === 0) {
                return true; // File is optional
            }
            return handleFileSelect(input);
        }

        // Simulate upload progress
        function simulateUploadProgress() {
            const progressContainer = document.getElementById('progress-container');
            const progressBar = document.getElementById('progress-bar');
            const progressText = document.getElementById('progress-text');
            
            progressContainer.style.display = 'block';
            let progress = 0;
            
            const interval = setInterval(function() {
                progress += 5;
                progressBar.style.width = progress + '%';
                progressText.textContent = progress + '%';
                
                if (progress >= 100) {
                    clearInterval(interval);
                    setTimeout(function() {
                        progressContainer.style.display = 'none';
                    }, 1000);
                }
            }, 100);
        }
        </script>
    {% endblock %}
    
    <script>
        function closeModal() {
            document.getElementById('errorModal').style.display = 'none';
        }
    </script>
{% endblock %}