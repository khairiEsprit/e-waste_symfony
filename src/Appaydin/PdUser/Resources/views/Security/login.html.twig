{% extends "@PdUser/base.html.twig" %}

{% block head_title %}{{ 'security.login_title'|trans }}{% endblock %}

{% block body %}
{# templates/security/login.html.twig #}
<div class="login">
    <img src="{{ asset('assets/front/auth/bg-image.png') }}" alt="login image" class="login__img">

    <form action="{{ path('security_login') }}" method="post" class="login__form" novalidate>
        <h1 class="login__title">{{ 'security.login_title'|trans }}</h1>

        {% if error %}
        <div class="login__alert">
            <i class="ri-error-warning-line login__alert-icon"></i>
            <div class="login__alert-text">{{ error.messageKey|trans(error.messageData, 'security') }}</div>
        </div>
        {% endif %}

        <div class="login__content">
            <div class="login__box">
                <i class="ri-user-3-line login__icon"></i>
                <div class="login__box-input">
                    <input name="_username"
                           value="{{ last_username }}"
                           type="email"
                           required
                           class="login__input"
                           id="login-email"
                           placeholder=" "
                           oninvalid="this.setCustomValidity('')"
                           oninput="validateEmail(this)">
                    <label for="login-email" class="login__label">{{ 'security.login_username'|trans }}</label>
                </div>
                <div class="login__error" id="email-error"></div>
            </div>

            <div class="login__box">
                <i class="ri-lock-2-line login__icon"></i>
                <div class="login__box-input">
                    <input name="_password"
                           type="password"
                           required
                           class="login__input"
                           id="login-pass"
                           placeholder=" "
                           oninvalid="this.setCustomValidity('')"
                           oninput="validatePassword(this)">
                    <label for="login-pass" class="login__label">{{ 'security.login_password'|trans }}</label>
                    <i class="ri-eye-off-line login__eye" id="login-eye"></i>
                </div>
                <div class="login__error" id="password-error"></div>
            </div>
        </div>

        <div class="login__check">
            <div class="login__check-group">
                <input type="checkbox" class="login__check-input" id="login-check" name="_remember_me" value="on">
                <label for="login-check" class="login__check-label">{{ 'security.login_rememberme'|trans }}</label>
            </div>

            <a href="{{ path('security_resetting') }}" class="login__forgot">{{ 'security.forgot_password'|trans }}</a>
        </div>

        <input type="hidden" name="_csrf_token" value="{{ csrf_token('authenticate') }}"/>

        <button type="submit" class="login__button">{{ 'security.login_btn'|trans }}</button>

        {# Face Recognition Login Button #}
        <a href="#" id="face-recognition-btn" class="login__button login__button--face">
            <i class="ri-face-recognition-line login__icon--social"></i>
            <span>Login with Face Recognition</span>
        </a>

        {# Refactored Google Login Button #}
     <div class="login__social">
    <p class="login__social-text">Or sign in with:</p>
    <a href="{{ path('set_oauth_flow', {'flow': 'login'}) }}" class="login__button login__button--social">
        <i class="ri-google-fill login__icon--social"></i>
        <span>Login with Google</span>
    </a>
</div>

        <p class="login__register">
            Donâ€™t have an account?
            {% if user_registration is not empty %}
                <a href="{{ path('security_register') }}">{{ 'security.register'|trans }}</a>
            {% endif %}
        </p>
    </form>
</div>
{# Modal for user already exists #}
{% if app.session.flashBag.has('modal_error') %}
    <div class="modal-overlay" id="errorModal">
        <div class="modal-content">
            <h2>Error</h2>
            <p>{{ app.session.flashBag.get('modal_error')[0] }}</p>
            <button onclick="closeModal()">OK</button>
        </div>
    </div>
{% endif %}


<style>

    .login__alert {
        background-color: rgba(255, 68, 68, 0.1);
        padding: 0.75rem;
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
    }

    .login__alert-icon {
        color: #ff4444;
        font-size: 1.2rem;
        margin-right: 0.5rem;
    }

    .login__alert-text {
        color: var(--white-color);
        font-size: 0.85rem;
    }

 .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5); /* Semi-transparent black for blur effect */
            backdrop-filter: blur(5px); /* Blur the background */
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            max-width: 400px;
            width: 100%;
        }

        .modal-content h2 {
            margin-bottom: 10px;
            color: #d9534f; /* Red for error */
        }

        .modal-content p {
            margin-bottom: 20px;
            color:black;
        }

        .modal-content button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .modal-content button:hover {
            background-color: #0056b3;
        }
   .login__form {
        position: relative;
        background-color: hsla(0, 0%, 10%, 0.1);
        border: 2px solid var(--white-color);
        margin-inline: 1.5rem;
        padding: 1rem 3.5rem 1rem; /* Reduced top and bottom padding */
        border-radius: 1rem;
        backdrop-filter: blur(8px);
        max-width: 400px;
        width: 100%;
    }
   .login__box {
        position: relative;
        margin-bottom: 0.75rem; /* Reduced margin */
    }

    .login__box-input {
        position: relative;
        margin-bottom: 0.15rem; /* Minimal margin */
    }
    .login__button {
        padding: 0.5rem; /* Smaller button */
        margin: 0.5rem 0;
    }

    .login__error {
        position: absolute;
        bottom: -1.25rem;
        left: 0;
        font-size: 0.7rem;
        color: #ff4444;
        margin-top: 0.2rem;
    }

    .login__input {
        width: 100%;
        padding: 0.75rem 0.5rem;
        background: rgba(255, 255, 255, 0.1);
        color: var(--white-color);
        position: relative;
        z-index: 1;
        border: none;
        outline: none;
        border-radius: 4px;
        transition: background-color 0.3s;
    }

    .login__input:focus {
        background: rgba(255, 255, 255, 0.15);
    }

    .login__label {
        position: absolute;
        left: 8px;
        top: 12px;
        font-weight: var(--font-medium);
        transition: top 0.3s, font-size 0.3s, transform 0.3s;
        color: var(--white-color);
        pointer-events: none;
    }

    .login__input:focus + .login__label,
    .login__input:not(:placeholder-shown).login__input:not(:focus) + .login__label {
        top: -20px;
        font-size: var(--small-font-size);
        transform: translateY(0);
    }

    .login__input.has-error {
  background-color: transparent;
    }

    .login__social {
        text-align: center;
        margin-bottom: 0.5rem;
    }

    .login__social-text {
        font-size: var(--small-font-size);
        color: var(--white-color);
        margin-bottom: 0.5rem;
    }

    .login__button--social, .login__button--face {
        background-color: white;
        color: black;
        border: none;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
        padding: 0.5rem;
        border-radius: 0.5rem;
        font-weight: var(--font-medium);
        margin-bottom: 0.5rem;
        text-decoration: none;
    }

    .login__button--face {
        background-color: #4CAF50;
        color: white;
    }

    .login__register {
        text-align: center;
        margin-top: 0.5rem; /* Reduced top margin */
        margin-bottom: 0.25rem; /* Added small bottom margin */
        color: var(--white-color);
    }

    .login__register a {
        color: var(--white-color);
        text-decoration: underline;
        margin-left: 0.25rem;
    }
</style>

<script>
        function closeModal() {
            document.getElementById('errorModal').style.display = 'none';
        }

        // Add error class to inputs when there's an error
        document.addEventListener('DOMContentLoaded', function() {
            const error = document.querySelector('.login__error');
            if (error) {
                const inputs = document.querySelectorAll('.login__input');
                inputs.forEach(input => {
                    input.classList.add('has-error');
                });
            }
        });

           function validateEmail(input) {
        const errorDiv = document.getElementById('email-error');
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

        if (input.value.trim() === '') {
            errorDiv.textContent = 'Email is required';
            input.classList.add('has-error');
            return false;
        } else if (!emailRegex.test(input.value)) {
            errorDiv.textContent = 'Please enter a valid email address';
            input.classList.add('has-error');
            return false;
        } else {
            errorDiv.textContent = '';
            input.classList.remove('has-error');
            return true;
        }
    }

    function validatePassword(input) {
        const errorDiv = document.getElementById('password-error');

        if (input.value.trim() === '') {
            errorDiv.textContent = 'Password is required';
            input.classList.add('has-error');
            return false;
        } else {
            errorDiv.textContent = '';
            input.classList.remove('has-error');
            return true;
        }
    }

    document.querySelector('.login__form').addEventListener('submit', function(e) {
        const emailInput = document.getElementById('login-email');
        const passwordInput = document.getElementById('login-pass');

        const isEmailValid = validateEmail(emailInput);
        const isPasswordValid = validatePassword(passwordInput);

        if (!isEmailValid || !isPasswordValid) {
            e.preventDefault();
        }
    });

    // Face Recognition Modal
    document.getElementById('face-recognition-btn').addEventListener('click', function(e) {
        e.preventDefault();
        showFaceRecognitionModal();
    });

    function showFaceRecognitionModal() {
        // Create modal container
        const modalOverlay = document.createElement('div');
        modalOverlay.className = 'modal-overlay';
        modalOverlay.id = 'faceRecognitionModal';

        // Create modal content
        const modalContent = document.createElement('div');
        modalContent.className = 'modal-content face-recognition-modal';

        // Add modal header
        const modalHeader = document.createElement('div');
        modalHeader.className = 'modal-header';
        modalHeader.innerHTML = `
            <h2>Face Recognition Login</h2>
            <button class="close-btn" onclick="closeFaceModal()">Ã—</button>
        `;

        // Add webcam container
        const webcamContainer = document.createElement('div');
        webcamContainer.className = 'webcam-container';
        webcamContainer.innerHTML = `
            <video id="login-webcam" class="webcam-video" autoplay playsinline></video>
            <div class="webcam-overlay"></div>
            <div class="webcam-guide"></div>
            <div class="webcam-status">Initializing camera...</div>
        `;

        // Add buttons
        const buttonContainer = document.createElement('div');
        buttonContainer.className = 'button-container';
        buttonContainer.innerHTML = `
            <button id="login-btn-capture" class="btn-capture" disabled>
                <i class="ri-camera-line"></i> Capture Photo
            </button>
            <p class="or-text">Or</p>
            <label for="login-file-upload" class="btn-upload">
                <i class="ri-upload-line"></i> Upload Photo
            </label>
            <input id="login-file-upload" type="file" accept="image/*" style="display: none;">
        `;

        // Add alert container
        const alertContainer = document.createElement('div');
        alertContainer.id = 'face-login-alert-container';
        alertContainer.className = 'alert-container';

        // Assemble modal
        modalContent.appendChild(modalHeader);
        modalContent.appendChild(alertContainer);
        modalContent.appendChild(webcamContainer);
        modalContent.appendChild(buttonContainer);
        modalOverlay.appendChild(modalContent);

        // Add to document
        document.body.appendChild(modalOverlay);

        // Initialize webcam
        initFaceLoginWebcam();

        // Setup event listeners
        setupFaceLoginEvents();
    }

    function closeFaceModal() {
        const modal = document.getElementById('faceRecognitionModal');
        if (modal) {
            // Stop webcam if it's running
            const video = document.getElementById('login-webcam');
            if (video && video.srcObject) {
                const tracks = video.srcObject.getTracks();
                tracks.forEach(track => track.stop());
            }

            // Remove modal
            document.body.removeChild(modal);
        }
    }

    function initFaceLoginWebcam() {
        const webcamElement = document.getElementById('login-webcam');
        const webcamStatus = document.querySelector('.webcam-status');
        const captureBtn = document.getElementById('login-btn-capture');

        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: { facingMode: 'user' } })
                .then(function(stream) {
                    webcamElement.srcObject = stream;
                    webcamStatus.textContent = 'Camera ready. Position your face within the guide.';
                    captureBtn.disabled = false;
                })
                .catch(function(error) {
                    webcamStatus.textContent = 'Camera access denied or not available.';
                    showFaceLoginAlert('warning', 'Camera access denied or not available. You can still upload a photo.');
                    console.error('Error accessing webcam:', error);
                });
        } else {
            webcamStatus.textContent = 'Your browser does not support webcam access.';
            showFaceLoginAlert('warning', 'Your browser does not support webcam access. Please use a modern browser or upload a photo.');
        }
    }

    function setupFaceLoginEvents() {
        const captureBtn = document.getElementById('login-btn-capture');
        const fileUpload = document.getElementById('login-file-upload');

        // Capture button
        captureBtn.addEventListener('click', function() {
            const webcamElement = document.getElementById('login-webcam');

            // Get the dimensions of the video
            const videoWidth = webcamElement.videoWidth;
            const videoHeight = webcamElement.videoHeight;

            // Calculate the center of the video
            const centerX = videoWidth / 2;
            const centerY = videoHeight / 2;

            // Calculate the size of the square crop (use the smaller dimension)
            const cropSize = Math.min(videoWidth, videoHeight) * 0.8; // 80% of the smaller dimension

            // Calculate the crop coordinates
            const cropX = centerX - (cropSize / 2);
            const cropY = centerY - (cropSize / 2);

            // Create a canvas for the cropped image
            const canvas = document.createElement('canvas');
            canvas.width = cropSize;
            canvas.height = cropSize;

            // Draw the cropped image on the canvas
            const context = canvas.getContext('2d');
            context.drawImage(
                webcamElement,
                cropX, cropY, cropSize, cropSize, // Source coordinates and dimensions
                0, 0, cropSize, cropSize // Destination coordinates and dimensions
            );

            // Convert the canvas to a data URL
            const capturedImage = canvas.toDataURL('image/jpeg', 0.9); // 0.9 quality
            authenticateWithFace(capturedImage);
        });

        // File upload
        fileUpload.addEventListener('change', function(e) {
            if (e.target.files && e.target.files[0]) {
                const reader = new FileReader();
                reader.onload = function(event) {
                    // Create an image element to get dimensions
                    const img = new Image();
                    img.onload = function() {
                        // Calculate the center of the image
                        const centerX = img.width / 2;
                        const centerY = img.height / 2;

                        // Calculate the size of the square crop (use the smaller dimension)
                        const cropSize = Math.min(img.width, img.height) * 0.8; // 80% of the smaller dimension

                        // Calculate the crop coordinates
                        const cropX = centerX - (cropSize / 2);
                        const cropY = centerY - (cropSize / 2);

                        // Create a canvas for the cropped image
                        const canvas = document.createElement('canvas');
                        canvas.width = cropSize;
                        canvas.height = cropSize;

                        // Draw the cropped image on the canvas
                        const context = canvas.getContext('2d');
                        context.drawImage(
                            img,
                            cropX, cropY, cropSize, cropSize, // Source coordinates and dimensions
                            0, 0, cropSize, cropSize // Destination coordinates and dimensions
                        );

                        // Convert the canvas to a data URL
                        const capturedImage = canvas.toDataURL('image/jpeg', 0.9); // 0.9 quality
                        authenticateWithFace(capturedImage);
                    };
                    img.src = event.target.result;
                };
                reader.readAsDataURL(e.target.files[0]);
            }
        });
    }

    function showFaceLoginAlert(type, message) {
        const alertContainer = document.getElementById('face-login-alert-container');
        alertContainer.innerHTML = `
            <div class="alert alert-${type}">
                <i class="ri-${type === 'success' ? 'checkbox-circle' : 'error-warning'}-line"></i>
                <span>${message}</span>
            </div>
        `;
    }

    function authenticateWithFace(base64Image) {
        showFaceLoginAlert('info', 'Processing your face... Please wait.');

        // Disable buttons during processing
        document.getElementById('login-btn-capture').disabled = true;
        document.getElementById('login-file-upload').disabled = true;

        console.log('Preparing to send face authentication request');

        // Log the first 100 characters of the image data for debugging
        console.log('Image data (first 100 chars):', base64Image.substring(0, 100));

        // First check if the face recognition service is available
        fetch('http://localhost:5000/health')
        .then(response => {
            if (!response.ok) {
                throw new Error('Face recognition service is not available');
            }
            return response.json();
        })
        .then(healthData => {
            console.log('Face recognition service health check:', healthData);

            // If service is available, proceed with authentication
            // Send the image to the server for authentication
            return fetch('/login/face', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: JSON.stringify({ face_image: base64Image })
            });
        })
        .then(response => {
            console.log('Authentication response status:', response.status);
            // Store the status code for debugging
            const statusCode = response.status;

            // Try to parse the response as JSON
            return response.text().then(text => {
                try {
                    // Try to parse as JSON
                    const data = JSON.parse(text);
                    return { statusCode, data };
                } catch (e) {
                    // If not JSON, return the raw text for debugging
                    return { statusCode, rawResponse: text, isJson: false };
                }
            });
        })
        .then(result => {
            console.log('Authentication response:', result);

            if (result.isJson === false) {
                // Check if this is a redirect response (302, 301, etc.)
                if (result.statusCode >= 300 && result.statusCode < 400) {
                    // Extract the redirect URL from the response
                    const redirectMatch = result.rawResponse.match(/Redirecting to ([^"]+)/);
                    if (redirectMatch && redirectMatch[1]) {
                        showFaceLoginAlert('success', 'Authentication successful! Redirecting...');
                        setTimeout(() => {
                            window.location.href = redirectMatch[1];
                        }, 1500);
                        return;
                    }
                }

                // If not a redirect or couldn't extract URL, show error
                showFaceLoginAlert('error', 'Received invalid response from server. Please try again.');
                console.error('Non-JSON response received:', result.rawResponse);
                return;
            }

            const data = result.data;

            if (data.success) {
                showFaceLoginAlert('success', 'Authentication successful! Redirecting...');
                setTimeout(() => {
                    window.location.href = data.redirect || '/';
                }, 1500);
            } else {
                showFaceLoginAlert('error', data.message || 'Authentication failed. Please try again.');
                console.error('Authentication failed:', data);
            }
        })
        .catch(error => {
            console.error('Error during face authentication:', error);
            showFaceLoginAlert('error', 'An error occurred during authentication: ' + error.message);
        })
        .finally(() => {
            // Re-enable buttons
            document.getElementById('login-btn-capture').disabled = false;
            document.getElementById('login-file-upload').disabled = false;
        });
    }
    </script>

<style>
    /* Face Recognition Modal Styles */
    .face-recognition-modal {
        max-width: 500px;
        padding: 0;
        overflow: hidden;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        background-color: #4CAF50;
        color: white;
    }

    .modal-header h2 {
        margin: 0;
        font-size: 1.5rem;
        color: white;
    }

    .close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.5rem;
        cursor: pointer;
    }

    .webcam-container {
        position: relative;
        width: 100%;
        height: 300px;
        overflow: hidden;
        background-color: #000;
    }

    .webcam-video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .webcam-overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.2);
    }

    .webcam-guide {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 200px;
        height: 200px;
        border: 2px dashed white;
        border-radius: 50%;
        box-shadow: 0 0 0 9999px rgba(0, 0, 0, 0.5);
    }

    .webcam-status {
        position: absolute;
        bottom: 10px;
        left: 0;
        width: 100%;
        text-align: center;
        color: white;
        background-color: rgba(0, 0, 0, 0.5);
        padding: 5px;
    }

    .button-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 20px;
    }

    .btn-capture, .btn-upload {
        display: inline-block;
        padding: 10px 20px;
        margin: 5px 0;
        background-color: #4CAF50;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-weight: bold;
        text-align: center;
    }

    .btn-capture:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .btn-upload {
        background-color: #2196F3;
    }

    .or-text {
        margin: 10px 0;
        color: #666;
    }

    .alert-container {
        padding: 10px 20px;
    }

    .alert {
        padding: 10px;
        border-radius: 5px;
        margin-bottom: 10px;
        display: flex;
        align-items: center;
    }

    .alert i {
        margin-right: 10px;
        font-size: 1.2rem;
    }

    .alert-success {
        background-color: rgba(76, 175, 80, 0.2);
        color: #4CAF50;
    }

    .alert-error {
        background-color: rgba(244, 67, 54, 0.2);
        color: #F44336;
    }

    .alert-warning {
        background-color: rgba(255, 152, 0, 0.2);
        color: #FF9800;
    }

    .alert-info {
        background-color: rgba(33, 150, 243, 0.2);
        color: #2196F3;
    }
</style>

{% endblock %}
