{% extends 'back/base.html.twig' %}

{% block title %}Liste des Demandes{% endblock %}

{% block content %}
<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Liste des Demandes</h1>
    </div>

    <!-- Search Container -->
    <div class="search-container mb-4">
        <div class="input-group">
            <span class="input-group-text">
                <i class="fas fa-search"></i>
            </span>
            <input type="text" id="searchInput" class="form-control" placeholder="Rechercher une demande...">
        </div>
    </div>

    <!-- Modal de confirmation -->
    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteConfirmationModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteConfirmationModalLabel">Confirmation de suppression</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Êtes-vous sûr de vouloir supprimer cette Demandes ?</p>
                    <p class="text-muted"><small>Cette action est irréversible.</small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                    <form id="deleteForm" method="post" action="">
                        <input type="hidden" name="_token" value="">
                        <button type="submit" class="btn btn-danger">
                            <i class="bi bi-trash"></i> Supprimer
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="card mb-4">
        <div class="card-header">
            <h3 class="card-title">Demandes</h3>
        </div>
        <div class="card-body p-0">
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Adresse</th>
                        <th>Email_utilisateur</th>
                        <th>Message</th>
                        <th>Type</th>
                        <th>Etat</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="demandesTableBody">
                    {% for demande in demandes %}
                        {% set dernierTraitement = demande.traitements|last %}
                        <tr class="demande-row" data-search="{{ demande.adresse|lower }} {{ demande.emailUtilisateur|lower }} {{ demande.message|lower }} {{ demande.type|lower }}">
                            <td>{{ demande.adresse }}</td>
                            <td>{{ demande.emailUtilisateur }}</td>
                            <td>{{ demande.message }}</td>
                            <td>{{ demande.type }}</td>
                            <td>
                                {% if dernierTraitement and dernierTraitement.status == 'Traité' %}
                                    <span class="badge bg-success">Traité</span>
                                {% elseif dernierTraitement and dernierTraitement.status == 'Refusé' %}
                                    <span class="badge bg-danger">Refusé</span>
                                {% else %}
                                    <span class="badge bg-warning">En cours de traitement</span>
                                {% endif %}
                            </td>
                            <td>
                                {% if not dernierTraitement or (dernierTraitement.status != 'Traité' and dernierTraitement.status != 'Refusé') %}
                                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#commentModal-{{ demande.id }}">
                                        Traiter
                                    </button>

                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#refuseModal-{{ demande.id }}">
                                        Refuser
                                    </button>

                                    <!-- Traiter Modal -->
                                    <div class="modal fade" id="commentModal-{{ demande.id }}" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="commentModalLabel">Ajouter un commentaire</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form method="POST" action="{{ path('app_demande_traiter', {'id': demande.id}) }}" id="traiterForm-{{ demande.id }}" onsubmit="return validateForm('traiterForm-{{ demande.id }}')" novalidate>
                                                        <div class="mb-3">
                                                            <label for="commentaire-traiter-{{ demande.id }}" class="form-label">Commentaire</label>
                                                            <textarea class="form-control" id="commentaire-traiter-{{ demande.id }}" name="commentaire" rows="3" required></textarea>
                                                            <div class="invalid-feedback">
                                                                Le commentaire ne peut pas être vide
                                                            </div>
                                                        </div>
                                                        <button type="submit" class="btn btn-primary">Soumettre</button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Refuser Modal -->
                                    <div class="modal fade" id="refuseModal-{{ demande.id }}" tabindex="-1" aria-labelledby="refuseModalLabel" aria-hidden="true">
                                        <div class="modal-dialog">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <h5 class="modal-title" id="refuseModalLabel">Ajouter un commentaire</h5>
                                                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                                </div>
                                                <div class="modal-body">
                                                    <form method="POST" action="{{ path('app_demande_refuser', {'id': demande.id}) }}" id="refuserForm-{{ demande.id }}" onsubmit="return validateForm('refuserForm-{{ demande.id }}')" novalidate>
                                                        <div class="mb-3">
                                                            <label for="commentaire-refuser-{{ demande.id }}" class="form-label">Commentaire</label>
                                                            <textarea class="form-control" id="commentaire-refuser-{{ demande.id }}" name="commentaire" rows="3" required></textarea>
                                                            <div class="invalid-feedback">
                                                                Le commentaire ne peut pas être vide.
                                                            </div>
                                                        </div>
                                                        <button type="submit" class="btn btn-danger">Soumettre</button>
                                                    </form>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                {% endif %}
                            </td>
                        </tr>
                    {% else %}
                        <tr>
                            <td colspan="7" class="text-center">Aucune Demandes trouvée</td>
                        </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        <div class="card-footer">
            <nav aria-label="Pagination">
                <ul class="pagination justify-content-center mb-0">
                    <li class="page-item disabled">
                        <a class="page-link" href="#" tabindex="-1">Précédent</a>
                    </li>
                    <li class="page-item active"><a class="page-link" href="#">1</a></li>
                    <li class="page-item"><a class="page-link" href="#">2</a></li>
                    <li class="page-item"><a class="page-link" href="#">3</a></li>
                    <li class="page-item">
                        <a class="page-link" href="#">Suivant</a>
                    </li>
                </ul>
            </nav>
        </div>
    </div>
</div>
{% endblock %}

{% block stylesheets %}
{{ parent() }}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<style>
    .search-container {
        max-width: 600px;
        margin: 0 auto 30px;
    }

    .input-group-text {
        background: linear-gradient(145deg, #2C5E1A, #1a7718);
        border: none;
        color: white;
    }

    .input-group .form-control {
        border-radius: 10px;
        border: 1px solid #e0e0e0;
        padding: 0.75rem;
    }

    .input-group .form-control:focus {
        border-color: #2C5E1A;
        box-shadow: 0 0 0 0.2rem rgba(44, 94, 26, 0.25);
    }
</style>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const demandesTableBody = document.getElementById('demandesTableBody');
    const demandeRows = document.querySelectorAll('.demande-row');

    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        demandeRows.forEach(row => {
            const searchableText = row.getAttribute('data-search');
            if (searchableText.includes(searchTerm)) {
                row.style.display = '';
            } else {
                row.style.display = 'none';
            }
        });

        // Check if any rows are visible
        const visibleRows = Array.from(demandesTableBody.querySelectorAll('.demande-row'))
            .filter(row => row.style.display !== 'none');

        if (visibleRows.length === 0) {
            if (!document.querySelector('.no-results-message')) {
                const noResults = document.createElement('tr');
                noResults.className = 'no-results-message';
                noResults.innerHTML = '<td colspan="7" class="text-center">Aucune demande ne correspond à votre recherche.</td>';
                demandesTableBody.appendChild(noResults);
            }
        } else {
            const noResults = document.querySelector('.no-results-message');
            if (noResults) {
                noResults.remove();
            }
        }
    });

    // Existing code for delete confirmation
    const deleteButtons = document.querySelectorAll('.delete-btn');
    const deleteForm = document.getElementById('deleteForm');

    deleteButtons.forEach(button => {
        button.addEventListener('click', function() {
            deleteForm.action = this.dataset.url;
            deleteForm.querySelector('input[name="_token"]').value = this.dataset.token;
        });
    });

    // Initialisation des validations pour les champs de commentaire
    const commentaireTextareas = document.querySelectorAll('textarea[name="commentaire"]');
    commentaireTextareas.forEach(textarea => {
        textarea.addEventListener('input', function() {
            updateCharCount(this);
        });

        // Initialiser le compteur au chargement
        updateCharCount(textarea);
    });

    // Optionnel: Affichage d'un toast après suppression réussie
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('deleted')) {
        const toast = new bootstrap.Toast(document.getElementById('successToast'));
        document.getElementById('toastMessage').textContent = 'La Demandes a été supprimée avec succès';
        toast.show();
    }
});

// Fonction pour mettre à jour le compteur de caractères
function updateCharCount(textarea) {
    const maxLength = 255;
    const currentLength = textarea.value.length;
    const id = textarea.id;
    const type = id.includes('traiter') ? 'traiter' : 'refuser';
    const demandeId = id.split('-').pop();
    const charCountElement = document.getElementById(`charCount-${type}-${demandeId}`);

    if (charCountElement) {
        // Mettre à jour le compteur
        charCountElement.textContent = `${currentLength}/${maxLength} caractères`;

        // Gestion visuelle
        if (currentLength === 0 || currentLength > maxLength) {
            textarea.classList.add('is-invalid');
            charCountElement.classList.add('text-danger');
            charCountElement.classList.remove('text-muted');
        } else {
            textarea.classList.remove('is-invalid');
            charCountElement.classList.remove('text-danger');
            charCountElement.classList.add('text-muted');
        }
    }
}

// Fonction de validation du formulaire avant soumission
function validateForm(formId) {
    const form = document.getElementById(formId);
    if (!form) return true;

    const textarea = form.querySelector('textarea[name="commentaire"]');
    if (!textarea) return true;

    const currentLength = textarea.value.trim().length;
    const maxLength = 255;

    // Réinitialiser l'état de validation
    textarea.classList.remove('is-invalid');

    // Vérification si vide
    if (currentLength === 0) {
        textarea.classList.add('is-invalid');
        return false;
    }

    // Vérification de la longueur maximum
    if (currentLength > maxLength) {
        textarea.classList.add('is-invalid');
        return false;
    }

    return true;
}

// Ajouter ce code dans votre addEventListener DOMContentLoaded
document.addEventListener('DOMContentLoaded', function() {
    // Code existant...

    // Cacher initialement tous les messages d'erreur
    document.querySelectorAll('.invalid-feedback').forEach(feedback => {
        feedback.style.display = 'none';
    });

    // Ajouter des gestionnaires d'événements aux formulaires
    document.querySelectorAll('form[id^="traiterForm-"], form[id^="refuserForm-"]').forEach(form => {
        form.addEventListener('submit', function(event) {
            const textarea = this.querySelector('textarea[name="commentaire"]');
            const feedback = textarea.nextElementSibling;

            if (textarea.value.trim().length === 0) {
                event.preventDefault();
                textarea.classList.add('is-invalid');
                feedback.style.display = 'block';
            }
        });
    });
});
</script>
{% endblock %}
