<!--begin::Header-->
<nav class="navbar navbar-expand bg-body">
  <!--begin::Container-->
  <div class="container-fluid">
    <!--begin::Start Navbar links-->
    <ul class="navbar-nav">
      <li class="nav-item">
        <a class="nav-link" data-lte-toggle="sidebar" href="#" role="button"
          ><i class="bi bi-list"></i
        ></a>
      </li>
      <li class="nav-item d-none d-md-block">
        <a href="#" class="nav-link">Home</a>
      </li>
      <li class="nav-item d-none d-md-block">
        <a href="#" class="nav-link">Contact</a>
      </li>
      
    </ul>
    <!--end::Start Navbar links-->
    <!--begin::End Navbar links-->
    
<ul class="navbar-nav ms-auto">
    <!-- User Profile Dropdown -->
   <li class="nav-item dropdown user-menu">
    <a href="#" class="nav-link dropdown-toggle" data-bs-toggle="dropdown">
        <img
        <img src="{{ app.user.profileImage ? app.user.profileImage : asset('assets/back/assets/img/avatar.png') }}"
            class="user-image rounded-circle shadow"
            alt="User Image"
        />
        <span class="d-none d-md-inline">{{ app.user.firstName ?? 'Guest' }}</span>
    </a>
    <ul class="dropdown-menu dropdown-menu-lg dropdown-menu-end">
        <!--begin::User Image-->
        <li class="user-header text-bg-primary">
                    <img src="{{ app.user.profileImage ? app.user.profileImage : asset('assets/back/assets/img/avatar.png') }}"

                class="rounded-circle shadow"
                alt="User Image"
            />
            <p>
                {{ app.user.firstName }} {{ app.user.lastName ?? '' }}
                <small>
                    Member since {{ app.user.createdAt ? app.user.createdAt|date('M. Y') : 'N/A' }}
                </small>
            </p>
        </li>
            <!--begin::Menu Body-->
            <li class="user-body">
                <div class="row">
                    <div class="col-4 text-center"><a href="#">Followers</a></div>
                    <div class="col-4 text-center"><a href="#">Sales</a></div>
                    <div class="col-4 text-center"><a href="#">Friends</a></div>
                </div>
            </li>
            <!--end::Menu Body-->
            <!--begin::Menu Footer-->
            <li class="user-footer">
                <a href="#" class="btn btn-default btn-flat">Profile</a>
                <a href="#" class="btn btn-default btn-flat float-end">Logout</a>
            </li>
        </ul>
    </li>
<li class="nav-item dropdown">
    <a class="nav-link" data-bs-toggle="dropdown" href="#">
        <i class="bi bi-bell-fill"></i>
        {% set unreadCount = notification_repository.countUnreadNotifications() %}
        {% if unreadCount > 0 %}
            <span class="navbar-badge badge text-bg-warning">{{ unreadCount }}</span>
        {% endif %}
    </a>
<div class="dropdown-menu dropdown-menu-lg dropdown-menu-end">
    <span class="dropdown-item dropdown-header">
        <span class="notification-count">{{ unreadCount }}</span> 
        Notification{{ unreadCount != 1 ? 's' : '' }}
    </span>
    <div class="dropdown-divider"></div>
    {% set notifications = notification_repository.findUnreadNotifications(10) %}
    {% for notification in notifications %}
        <a href="{{ path('admin_notification_read', {'id': notification.id}) }}" 
           class="dropdown-item notification-link"
           data-notification-id="{{ notification.id }}">
            <i class="bi bi-person-fill me-2"></i> {{ notification.message }}
            <span class="float-end text-secondary fs-7">
                {{ notification.createdAt|ago }}
            </span>
        </a>  
        <div class="dropdown-divider"></div>
    {% else %}
        <a href="#" class="dropdown-item">No new notifications</a>
        <div class="dropdown-divider"></div>
    {% endfor %}
</div>
</li>
    <!-- Theme Toggle Dropdown -->
    <li class="nav-item dropdown">
        <button
            class="btn btn-link nav-link py-2 px-0 px-lg-2 dropdown-toggle d-flex align-items-center"
            id="bd-theme"
            type="button"
            aria-expanded="false"
            data-bs-toggle="dropdown"
            data-bs-display="static"
        >
            <span class="theme-icon-active">
                <i class="my-1"></i>
            </span>
            <span class="d-lg-none ms-2" id="bd-theme-text">Toggle theme</span>
        </button>
        <ul
            class="dropdown-menu dropdown-menu-end"
            aria-labelledby="bd-theme-text"
            style="--bs-dropdown-min-width: 8rem;"
        >
            <li>
                <button
                    type="button"
                    class="dropdown-item d-flex align-items-center active"
                    data-bs-theme-value="light"
                    aria-pressed="false"
                >
                    <i class="bi bi-sun-fill me-2"></i>
                    Light
                    <i class="bi bi-check-lg ms-auto d-none"></i>
                </button>
            </li>
            <li>
                <button
                    type="button"
                    class="dropdown-item d-flex align-items-center"
                    data-bs-theme-value="dark"
                    aria-pressed="false"
                >
                    <i class="bi bi-moon-fill me-2"></i>
                    Dark
                    <i class="bi bi-check-lg ms-auto d-none"></i>
                </button>
            </li>
            <li>
                <button
                    type="button"
                    class="dropdown-item d-flex align-items-center"
                    data-bs-theme-value="auto"
                    aria-pressed="true"
                >
                    <i class="bi bi-circle-fill-half-stroke me-2"></i>
                    Auto
                    <i class="bi bi-check-lg ms-auto d-none"></i>
                </button>
            </li>
        </ul>
    </li>
</ul>
    <!--end::End Navbar links-->
  </div>
  <!--end::Container-->
</nav>
<!--end::Header-->
<script>
document.addEventListener('DOMContentLoaded', function() {
    document.querySelectorAll('.notification-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            
            const notificationId = this.getAttribute('data-notification-id');
            const url = this.getAttribute('href');
            const notificationItem = this.closest('.dropdown-item');
            const divider = notificationItem.nextElementSibling;

            // Update UI immediately
            updateNotificationCount(-1);
            notificationItem.remove();
            if (divider && divider.classList.contains('dropdown-divider')) {
                divider.remove();
            }

            // Make the API call
            fetch(url, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! Status: ${response.status}`);
                }
                return response.json();
            })
            .catch(error => {
                console.error('Fetch error:', error);
                // Optionally: revert UI changes if the request fails
            });
        });
    });

    function updateNotificationCount(change) {
        // Update navbar badge
        const badge = document.querySelector('.navbar-badge');
        if (badge) {
            let count = parseInt(badge.textContent);
            count += change;
            if (count > 0) {
                badge.textContent = count;
            } else {
                badge.remove();
            }
        }

        // Update dropdown header count
        const headerCount = document.querySelector('.notification-count');
        if (headerCount) {
            let count = parseInt(headerCount.textContent);
            count += change;
            if (count >= 0) {
                headerCount.textContent = count;
                
                // Update "Notification/Notifications" text
                const header = headerCount.parentElement;
                header.textContent = `${count} Notification${count !== 1 ? 's' : ''}`;
            }
        }
    }
});
// Color Mode Toggler
(() => {
  "use strict";

  const storedTheme = localStorage.getItem("theme");

  const getPreferredTheme = () => {
    if (storedTheme) {
      return storedTheme;
    }

    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };

  const setTheme = function (theme) {
    if (
      theme === "auto" &&
      window.matchMedia("(prefers-color-scheme: dark)").matches
    ) {
      document.documentElement.setAttribute("data-bs-theme", "dark");
    } else {
      document.documentElement.setAttribute("data-bs-theme", theme);
    }
  };

  setTheme(getPreferredTheme());

  const showActiveTheme = (theme, focus = false) => {
    const themeSwitcher = document.querySelector("#bd-theme");

    if (!themeSwitcher) {
      return;
    }

    const themeSwitcherText = document.querySelector("#bd-theme-text");
    const activeThemeIcon = document.querySelector(".theme-icon-active i");
    const btnToActive = document.querySelector(
      `[data-bs-theme-value="${theme}"]`
    );
    const svgOfActiveBtn = btnToActive.querySelector("i").getAttribute("class");

    for (const element of document.querySelectorAll("[data-bs-theme-value]")) {
      element.classList.remove("active");
      element.setAttribute("aria-pressed", "false");
    }

    btnToActive.classList.add("active");
    btnToActive.setAttribute("aria-pressed", "true");
    activeThemeIcon.setAttribute("class", svgOfActiveBtn);
    const themeSwitcherLabel = `${themeSwitcherText.textContent} (${btnToActive.dataset.bsThemeValue})`;
    themeSwitcher.setAttribute("aria-label", themeSwitcherLabel);

    if (focus) {
      themeSwitcher.focus();
    }
  };

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (storedTheme !== "light" || storedTheme !== "dark") {
        setTheme(getPreferredTheme());
      }
    });

  window.addEventListener("DOMContentLoaded", () => {
    showActiveTheme(getPreferredTheme());

    for (const toggle of document.querySelectorAll("[data-bs-theme-value]")) {
      toggle.addEventListener("click", () => {
        const theme = toggle.getAttribute("data-bs-theme-value");
        localStorage.setItem("theme", theme);
        setTheme(theme);
        showActiveTheme(theme, true);
      });
    }
  });
})();
</script>