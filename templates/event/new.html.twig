{% extends 'back/index.html.twig' %}

{% block content %}
    <div class="app-content">
        <div class="container-fluid">
            <!-- Affichage des messages flash -->
            {% for type, messages in app.flashes %}
                {% for message in messages %}
                    <div class="alert alert-{{ type }} alert-dismissible fade show mb-4">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                {% endfor %}
            {% endfor %}

            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0" style="color: #013220;">Créer un événement</h1>
                <div>
                    <a href="{{ path('app_event_ai_suggestions') }}" class="btn me-2" style="background-color: #29AB87; color: #FEFEFA;">
                        <i class="fas fa-magic me-1"></i> Suggestions IA
                    </a>
                    <a href="{{ path('app_event_index') }}" class="btn" style="background-color: #013220; color: #FEFEFA;">
                        <i class="fas fa-arrow-left me-1"></i> Retour
                    </a>
                </div>
            </div>

            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    {{ form_start(form, {'attr': {'id': 'event-form', 'class': 'needs-validation', 'novalidate': true}}) }}

                    <div class="row g-4">
                        <div class="col-md-6">
                            <div class="mb-3">
                                {{ form_label(form.title, null, {'label_attr': {'class': 'form-label fw-bold', 'style': 'color: #00693E'}}) }}
                                {{ form_widget(form.title, {'attr': {
                                    'class': 'form-control' ~ (form.title.vars.errors|length ? ' is-invalid' : ''),
                                    'style': 'border-color: #29AB87',
                                    'placeholder': 'Titre de l\'événement',
                                    'required': true
                                }}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.title) }}
                                </div>
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.description, null, {'label_attr': {'class': 'form-label fw-bold', 'style': 'color: #00693E'}}) }}
                                {{ form_widget(form.description, {'attr': {
                                    'class': 'form-control' ~ (form.description.vars.errors|length ? ' is-invalid' : ''),
                                    'style': 'border-color: #29AB87; height: 120px',
                                    'placeholder': 'Description détaillée...',
                                    'required': true
                                }}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.description) }}
                                </div>
                            </div>
                        </div>

                        <div class="col-md-6">
                            <div class="mb-3">
                                {{ form_label(form.date, null, {'label_attr': {'class': 'form-label fw-bold', 'style': 'color: #00693E'}}) }}
                                {{ form_widget(form.date, {'attr': {
                                    'class': 'form-control' ~ (form.date.vars.errors|length ? ' is-invalid' : ''),
                                    'style': 'border-color: #29AB87',
                                    'required': true
                                }}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.date) }}
                                </div>
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.location, null, {'label_attr': {'class': 'form-label fw-bold', 'style': 'color: #00693E'}}) }}
                                {{ form_widget(form.location, {'attr': {
                                    'class': 'form-control' ~ (form.location.vars.errors|length ? ' is-invalid' : ''),
                                    'style': 'border-color: #29AB87',
                                    'placeholder': 'Lieu exact...',
                                    'required': true
                                }}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.location) }}
                                </div>
                            </div>

                            <div class="mb-3">
                                {{ form_label(form.remainingPlaces, null, {'label_attr': {'class': 'form-label fw-bold', 'style': 'color: #00693E'}}) }}
                                {{ form_widget(form.remainingPlaces, {'attr': {
                                    'class': 'form-control' ~ (form.remainingPlaces.vars.errors|length ? ' is-invalid' : ''),
                                    'style': 'border-color: #29AB87',
                                    'min': 0,
                                    'required': true
                                }}) }}
                                <div class="invalid-feedback">
                                    {{ form_errors(form.remainingPlaces) }}
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                {{ form_label(form.image, null, {'label_attr': {'class': 'form-label fw-bold', 'style': 'color: #00693E'}}) }}
                                
                                <!-- Custom File Upload Area -->
                                <div class="file-upload-container">
                                    <div class="file-upload-area" id="dropzone">
                                        <div class="file-upload-message text-center">
                                            <i class="fas fa-cloud-upload-alt fa-3x mb-3" style="color: #29AB87;"></i>
                                            <h5 class="mb-2">Glissez et déposez votre image ici</h5>
                                            <p class="text-muted">ou</p>
                                            <button type="button" class="btn btn-outline-success browse-btn">
                                                <i class="fas fa-folder-open me-2"></i> Parcourir
                                            </button>
                                            <p class="mt-2 small text-muted">{{ form_help(form.image) }}</p>
                                        </div>
                                        <div class="file-preview d-none">
                                            <div class="position-relative">
                                                <img src="" alt="Aperçu de l'image" class="img-fluid rounded" id="image-preview">
                                                <button type="button" class="btn btn-sm btn-danger position-absolute top-0 end-0 m-2 remove-file">
                                                    <i class="fas fa-times"></i>
                                                </button>
                                            </div>
                                            <p class="mt-2 mb-0 file-name text-center"></p>
                                        </div>
                                    </div>
                                    {{ form_widget(form.image) }}
                                    <div class="invalid-feedback d-block">
                                        {{ form_errors(form.image) }}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
                        <button type="button" class="btn px-4" style="background-color: #29AB87; color: white;" id="submit-btn">
                            <i class="fas fa-save me-2"></i> Enregistrer
                        </button>
                    </div>
                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>

    <style>
        .form-control:focus {
            border-color: #29AB87;
            box-shadow: 0 0 0 0.25rem rgba(41, 171, 135, 0.25);
        }
        .card {
            border-radius: 10px;
            background-color: #FEFEFA;
        }
        .is-invalid {
            border-color: #dc3545 !important;
        }
        .invalid-feedback {
            color: #dc3545;
            font-size: 0.875em;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border-color: #c3e6cb;
        }
        .alert-error {
            background-color: #f8d7da;
            color: #721c24;
            border-color: #f5c6cb;
        }
        
        /* File Upload Styles */
        .file-upload-container {
            margin-bottom: 1.5rem;
        }
        
        .file-upload-area {
            border: 2px dashed #29AB87;
            border-radius: 10px;
            padding: 2rem;
            text-align: center;
            background-color: rgba(41, 171, 135, 0.05);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }
        
        .file-upload-area:hover, .file-upload-area.dragover {
            background-color: rgba(41, 171, 135, 0.1);
            border-color: #00693E;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 105, 62, 0.1);
        }
        
        .file-upload-message {
            transition: all 0.3s ease;
        }
        
        .browse-btn {
            color: #29AB87;
            border-color: #29AB87;
            border-radius: 50px;
            padding: 0.5rem 1.5rem;
            transition: all 0.3s ease;
        }
        
        .browse-btn:hover {
            background-color: #29AB87;
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(41, 171, 135, 0.2);
        }
        
        .file-preview {
            padding: 1rem;
        }
        
        .file-preview img {
            max-height: 200px;
            width: auto;
            margin: 0 auto;
            display: block;
            border: 2px solid #29AB87;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .file-name {
            margin-top: 0.5rem;
            font-weight: 600;
            color: #00693E;
        }
        
        .remove-file {
            opacity: 0.8;
            transition: all 0.3s ease;
        }
        
        .remove-file:hover {
            opacity: 1;
            transform: scale(1.1);
        }
    </style>

    <!-- Intégration de SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        // Validation côté client
        (function() {
            'use strict';
            const forms = document.querySelectorAll('.needs-validation');

            Array.from(forms).forEach(form => {
                form.addEventListener('submit', function(event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();
        
        // Drag and drop file upload functionality
        document.addEventListener('DOMContentLoaded', function() {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.querySelector('input[type="file"]');
            const browseBtn = document.querySelector('.browse-btn');
            const removeBtn = document.querySelector('.remove-file');
            const filePreview = document.querySelector('.file-preview');
            const fileUploadMessage = document.querySelector('.file-upload-message');
            const imagePreview = document.getElementById('image-preview');
            const fileNameDisplay = document.querySelector('.file-name');
            
            // Open file dialog when browse button is clicked
            browseBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                fileInput.click();
            });
            
            // Handle drag and drop events
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, preventDefaults, false);
            });
            
            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }
            
            ['dragenter', 'dragover'].forEach(eventName => {
                dropzone.addEventListener(eventName, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, unhighlight, false);
            });
            
            function highlight() {
                dropzone.classList.add('dragover');
            }
            
            function unhighlight() {
                dropzone.classList.remove('dragover');
            }
            
            // Handle dropped files
            dropzone.addEventListener('drop', handleDrop, false);
            
            function handleDrop(e) {
                const dt = e.dataTransfer;
                const files = dt.files;
                
                if (files.length) {
                    fileInput.files = files;
                    updateFilePreview(files[0]);
                }
            }
            
            // Handle file input change
            fileInput.addEventListener('change', function() {
                if (this.files.length) {
                    updateFilePreview(this.files[0]);
                }
            });
            
            // Update file preview
            function updateFilePreview(file) {
                // Validate file type
                const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                if (!validTypes.includes(file.type)) {
                    Swal.fire({
                        title: 'Format non supporté',
                        text: 'Veuillez sélectionner une image au format JPG, PNG, GIF ou WEBP.',
                        icon: 'error',
                        confirmButtonColor: '#29AB87'
                    });
                    return;
                }
                
                // Validate file size (max 5MB)
                if (file.size > 5 * 1024 * 1024) {
                    Swal.fire({
                        title: 'Fichier trop volumineux',
                        text: 'La taille de l\'image ne doit pas dépasser 5 Mo.',
                        icon: 'error',
                        confirmButtonColor: '#29AB87'
                    });
                    return;
                }
                
                // Show file preview
                const reader = new FileReader();
                reader.onload = function(e) {
                    imagePreview.src = e.target.result;
                    fileNameDisplay.textContent = file.name;
                    fileUploadMessage.classList.add('d-none');
                    filePreview.classList.remove('d-none');
                }
                reader.readAsDataURL(file);
            }
            
            // Remove file
            removeBtn.addEventListener('click', function() {
                fileInput.value = '';
                filePreview.classList.add('d-none');
                fileUploadMessage.classList.remove('d-none');
                imagePreview.src = '';
                fileNameDisplay.textContent = '';
            });
            
            // Click on dropzone to trigger file input
            dropzone.addEventListener('click', function(e) {
                if (e.target === dropzone || e.target === fileUploadMessage || fileUploadMessage.contains(e.target)) {
                    fileInput.click();
                }
            });
        });

        // Gestion de la confirmation avant enregistrement
        document.getElementById('submit-btn').addEventListener('click', function(e) {
            e.preventDefault();

            const form = document.getElementById('event-form');
            form.classList.add('was-validated');

            if (form.checkValidity()) {
                Swal.fire({
                    title: 'Confirmer la création',
                    text: 'Voulez-vous créer cet événement ?',
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#29AB87',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Oui, créer',
                    cancelButtonText: 'Annuler',
                    background: '#FEFEFA',
                    customClass: {
                        popup: 'animated bounceIn'
                    }
                }).then((result) => {
                    if (result.isConfirmed) {
                        form.submit();
                    }
                });
            }
        });
        
        // Vérifier s'il y a une suggestion à utiliser depuis le localStorage
        document.addEventListener('DOMContentLoaded', function() {
            const storedSuggestion = localStorage.getItem('event_suggestion');
            if (storedSuggestion) {
                try {
                    const suggestion = JSON.parse(storedSuggestion);
                    
                    // Demander à l'utilisateur s'il souhaite utiliser la suggestion
                    Swal.fire({
                        title: 'Utiliser la suggestion ?',
                        text: 'Voulez-vous remplir le formulaire avec la suggestion "' + suggestion.title + '" ?',
                        icon: 'question',
                        showCancelButton: true,
                        confirmButtonColor: '#29AB87',
                        cancelButtonColor: '#6c757d',
                        confirmButtonText: 'Oui, utiliser',
                        cancelButtonText: 'Non, ignorer',
                        background: '#FEFEFA'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Remplir le formulaire avec les données de la suggestion
                            fillFormWithSuggestion(suggestion);
                            
                            // Afficher un message de succès
                            Swal.fire({
                                title: 'Formulaire pré-rempli',
                                text: 'Les champs ont été remplis avec la suggestion. Vous pouvez les modifier avant de soumettre.',
                                icon: 'success',
                                confirmButtonColor: '#29AB87',
                                background: '#FEFEFA'
                            });
                        }
                        
                        // Supprimer la suggestion du localStorage dans tous les cas
                        localStorage.removeItem('event_suggestion');
                    });
                } catch (e) {
                    console.error('Erreur lors du chargement de la suggestion:', e);
                    localStorage.removeItem('event_suggestion');
                }
            }
        });
        
        // Fonction pour remplir le formulaire avec les données de la suggestion
        function fillFormWithSuggestion(suggestion) {
            // Remplir le titre
            if (suggestion.title) {
                document.querySelector('#{{ form.title.vars.id }}').value = suggestion.title;
            }
            
            // Remplir la description
            if (suggestion.description) {
                document.querySelector('#{{ form.description.vars.id }}').value = suggestion.description;
            }
            
            // Remplir le lieu
            if (suggestion.location) {
                document.querySelector('#{{ form.location.vars.id }}').value = suggestion.location;
            }
            
            // Remplir le nombre de places
            if (suggestion.capacity || suggestion.remainingPlaces) {
                document.querySelector('#{{ form.remainingPlaces.vars.id }}').value = suggestion.capacity || suggestion.remainingPlaces || 50;
            }
            
            // Pour la date, nous utilisons la date actuelle + 7 jours
            const futureDate = new Date();
            futureDate.setDate(futureDate.getDate() + 7);
            const formattedDate = futureDate.toISOString().slice(0, 16);
            document.querySelector('#{{ form.date.vars.id }}').value = formattedDate;
        }
    </script>
{% endblock %}